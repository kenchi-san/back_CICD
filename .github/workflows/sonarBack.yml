name: CI - Backend Tests & SonarCloud

on:
  push:
    branches: ["main", "mise_en_place_ci_cd"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  backend-tests:
    name: Backend - Tests & Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build, test and generate coverage report
        run: mvn clean verify jacoco:report

      - name: Upload Jacoco coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/jacoco.xml  # chemin relatif à `back`

  sonar-analysis:
    name: Backend - SonarCloud Analysis
    needs: backend-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Download Jacoco report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco  # chemin relatif à `back`

      - name: SonarCloud analysis
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
        with:
          projectBaseDir: back  # ✅ analyse bien dans le dossier back
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_BACK }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.key={0} -Dsonar.pullrequest.branch={1} -Dsonar.pullrequest.base={2}', github.event.pull_request.number, github.head_ref, github.base_ref) || '' }}

  quality-gate:
    name: Backend - Wait for Quality Gate
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Wait for SonarCloud Quality Gate
        uses: SonarSource/sonarcloud-quality-gate-action@master
        with:
          projectKey: ${{ secrets.SONAR_PROJECT_KEY_BACK }}
          sonarToken: ${{ secrets.SONAR_TOKEN_BACK }}
